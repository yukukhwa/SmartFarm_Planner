<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.spam.sfplanner.actresult.ActResultMapper">
	<!-- [김기성]
	dto 설계에 따라 외래키를 포함하는 객체의 컬럼값들을 쉽게 가져오기 위해서 resultMap을 사용하였다.
	fMemberId(농가회원아이디)를 가지고 있는 FarmMember(농가회원)을 collection하였고,
	ppNumber(계획서넘버)를 가지고 있는 ProductionPlan(계획서)를 collection하였다.
	그리고 ppNameNumber(계획명 카테고리넘버)를 가지고 있는 TitlePlan(계획명)을 collection하였고,
	fNumber(농가넘버)를 가지고 있는 Farm(농가)를 collection하였다. -->
	<resultMap type="com.spam.sfplanner.actresult.ActResult" id="actResult">
		<id column="pp_resultlist_number" property="ppResultlistNumber"/>
		<result column="pp_resultlist_date" property="ppResultlistDate"/>
		<collection property="farmMember" ofType="com.spam.sfplanner.user.FarmMember">
			<id column="f_member_id" property="fMemberId"/>
			<result column="f_member_pw" property="fMemberPw"/>
			<result column="f_member_name" property="fMemberName"/>
			<result column="f_member_phone" property="fMemberPhone"/>
			<result column="f_member_gender" property="fMemberGender"/>
			<result column="f_member_email" property="fMemberEmail"/>
			<result column="f_member_privacy" property="fMemberPrivacy"/>
			<result column="f_member_doroaddress" property="fMemberDoroaddress"/>
			<result column="f_member_jibunaddress" property="fMemberJibunaddress"/>
			<result column="f_member_detailaddress" property="fMemberDetailaddress"/>
			<result column="f_member_registdate" property="fMemberRegistdate"/>
		</collection>
		<collection property="productionPlan" ofType="com.spam.sfplanner.plan.ProductionPlan">
			<id column="pp_number" property="ppNumber"/>
			<result column="pp_startday" property="ppStartday"/>
			<result column="pp_endday" property="ppEndday"/>
			<result column="pp_ownarea" property="ppOwnarea"/>
			<result column="pp_rentarea" property="ppRentarea"/>
			<result column="pp_recordday" property="ppRecordday"/>
			<result column="pp_secret" property="ppSecret"/>
			<collection property="titlePlan" ofType="com.spam.sfplanner.plan.TitlePlan">
				<id column="pp_name_number" property="ppNameNumber"/>
				<result column="pp_name_planname" property="ppNamePlanname"/>
			</collection>
		</collection>
		<collection property="farm" ofType="com.spam.sfplanner.corporation.Farm">
			<id column="f_number" property="fNumber"/>
			<result column="f_name" property="fName"/>
			<result column="f_phone" property="fPhone"/>
			<result column="f_doroaddress" property="fDoroaddress"/>
			<result column="f_jibunaddress" property="fJibunaddress"/>
			<result column="f_party" property="fParty"/>
			<result column="f_registdate" property="fRegistdate"/>
		</collection>
	</resultMap>
	<!-- 실행결과넘버를 매개변수로 받아 해당하는 튜플을 삭제하는 쿼리문 -->
	<delete id="deleteActResult"
			parameterType="Integer">
		DELETE FROM
			sp_pp_resultlist
		WHERE pp_resultlist_number = #{ppResultlistNumber}
	</delete>
	<!-- map을 매개변수로 받아 기본기인 실행결과리스트넘버에 해당하는 컬럼들을 select하는 쿼리문
	계획서의 계획명을 가져오기위해서 계획서와 계획명카테고리를 조인하였다.
	농가넘버를 가져오기 위해서 농가테이블을 조인하였다.
	회원 아이디를 가져오기 위해서 농가회원테이블을 조인하였다. -->
	<select id="oneSelectActResult"
			parameterType="Map"
			resultMap="actResult">
		SELECT
			sp_pp_resultlist.pp_resultlist_number,
			sp_pp_name_cate.pp_name_planname,
			sp_farm.f_number,
			sp_farm.f_name,
			sp_pp_resultlist.pp_resultlist_date,
			sp_farm_member.f_member_id,
			sp_farm_member.f_member_name,
			sp_pp.pp_startday,
			sp_pp.pp_endday,
			sp_pp.pp_ownarea,
			sp_pp.pp_rentarea
		FROM sp_pp_resultlist
		JOIN sp_pp ON sp_pp.pp_number = sp_pp_resultlist.pp_number
		JOIN sp_pp_name_cate ON sp_pp_name_cate.pp_name_number = sp_pp.pp_name_number
		JOIN sp_farm ON sp_farm.f_number = sp_pp_resultlist.f_number
		JOIN sp_farm_member ON sp_farm_member.f_member_id = sp_pp_resultlist.f_member_id
		WHERE sp_pp_resultlist.pp_resultlist_number = #{ppResultlistNumber}
	</select>
	<!-- map에 해당하는 조건을 활용하여 listSelectActResult와 동일하게 리스트를 가져와
	그 개수를 새는 쿼리문 -->
	<select id="countActResult"
			parameterType="Map"
			resultType="integer">
		SELECT 
			COUNT(*) AS totalRow 
		FROM sp_pp_resultlist
		JOIN sp_pp ON sp_pp.pp_number = sp_pp_resultlist.pp_number
		JOIN sp_pp_name_cate ON sp_pp_name_cate.pp_name_number = sp_pp.pp_name_number
		JOIN sp_farm ON sp_farm.f_number = sp_pp_resultlist.f_number
		JOIN sp_farm_member ON sp_farm_member.f_member_id = sp_pp_resultlist.f_member_id
		WHERE sp_pp_resultlist.pp_resultlist_number = sp_pp_resultlist.pp_resultlist_number
		<if test="fNumber != null">
			AND sp_pp_resultlist.f_number = #{fNumber}
		</if>
		<if test="searchOption != null">
			<if test="searchOption eq 'planName'">
				AND sp_pp_name_cate.pp_name_planname LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
			<if test="searchOption eq 'date'">
				AND sp_pp_resultlist.pp_resultlist_date BETWEEN #{startDate} AND #{endDate}
			</if>
			<if test="searchOption eq 'farmName'">
				AND sp_farm.f_name LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
			<if test="searchOption eq 'memberId'">
				AND sp_farm_member.f_member_id LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
		</if>
	</select>
	<!-- 실행결과 리스트를 가져오는 쿼리문
	계획서, 계획서와 연결되어있는 계획서 카테고리, 농가 와 조인을 하고
	if문을 사용하기 위해 전체목록이 나오도록 조건을 걸었다.
	농가넘버가 있다면 해당하는 농가의 실행결과 리스트가 나오도록 하였고,
	계획명/농가명/기간별/회원아이디 검색을 하기 위해 조건무을 넣었다.
	페이징 작업을 하기 위해 내림차순으로 정렬하였고 limit을 활용였다. -->
	<select id="listSelectActResult"
			parameterType="Map"
			resultMap="actResult">
		SELECT
			sp_pp_name_cate.pp_name_planname,
			sp_pp_resultlist.pp_resultlist_number,
			sp_farm.f_number,
			sp_pp_resultlist.pp_resultlist_date,
			sp_farm.f_name,
			sp_farm_member.f_member_id,
			sp_farm_member.f_member_name
		FROM sp_pp_resultlist
		JOIN sp_pp ON sp_pp.pp_number = sp_pp_resultlist.pp_number
		JOIN sp_pp_name_cate ON sp_pp_name_cate.pp_name_number = sp_pp.pp_name_number
		JOIN sp_farm ON sp_farm.f_number = sp_pp_resultlist.f_number
		JOIN sp_farm_member ON sp_farm_member.f_member_id = sp_pp_resultlist.f_member_id
		WHERE sp_pp_resultlist.pp_resultlist_number = sp_pp_resultlist.pp_resultlist_number
		<if test="fNumber != null">
			AND sp_pp_resultlist.f_number = #{fNumber}
		</if>
		<if test="ppNumber != null">
			AND sp_pp_resultlist.pp_number = #{ppNumber}
		</if>
		<if test="searchOption != null">
			<if test="searchOption eq 'planName'">
				AND sp_pp_name_cate.pp_name_planname LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
			<if test="searchOption eq 'date'">
				AND sp_pp_resultlist.pp_resultlist_date BETWEEN #{startDate} AND #{endDate}
			</if>
			<if test="searchOption eq 'farmName'">
				AND sp_farm.f_name LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
			<if test="searchOption eq 'memberId'">
				AND sp_farm_member.f_member_id LIKE CONCAT('%',#{searchKeyword},'%')
			</if>
		</if>
		ORDER BY sp_pp_resultlist.pp_resultlist_number DESC 
		LIMIT #{beginRow}, #{pagePerRow}
	</select>
	<!-- ActResult type으로 매개변수를 받아 실행결과를 입력하는 쿼리문
	입력후에 기본키를 리턴받기 위해 selectKey를 활용하였다. -->
	<insert id="insertActResult" parameterType="com.spam.sfplanner.actresult.ActResult">
		<selectKey resultType="int"
				   keyColumn="pp_resultlist_number"
				   keyProperty="ppResultlistNumber"
				   order="AFTER">
			SELECT @@IDENTITY
		</selectKey>
		INSERT INTO sp_pp_resultlist (
			pp_number,
			f_number,
			pp_resultlist_date,
			f_member_id
		)
		VALUES (
			#{productionPlan.ppNumber},
			#{farm.fNumber},
			NOW(),
			#{farmMember.fMemberId}
		)
	</insert>
</mapper>

