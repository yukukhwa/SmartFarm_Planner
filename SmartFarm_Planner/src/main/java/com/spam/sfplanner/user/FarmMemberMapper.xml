<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.spam.sfplanner.user.FarmMemberMapper">
	 <resultMap type="com.spam.sfplanner.user.FarmMember" id="farmMember">
			<id column="f_member_id" property="fMemberId"/>
			<!-- property : 대상객체의 setter메소드명 지정 -->
	        <result column="f_member_pw" property="fMemberPw"/>
	        <result column="f_member_name" property="fMemberName"/>
	        <result column="f_member_email" property="fMemberEmail"/>
	        <result column="f_member_phone" property="fMemberPhone"/>	        
	        <result column="f_member_gender" property="fMemberGender"/>
	        <result column="f_member_privacy" property="fMemberPrivacy"/>
	        <result column="f_member_doroaddress" property="fMemberDoroaddress"/>
	        <result column="f_member_jibunaddress" property="fMemberJibunaddress"/>
			<result column="f_member_detailaddress" property="fMemberDetailaddress"/>
			<result column="f_member_registdate" property="fMemberRegistdate"/>
	        <!-- ofType : 목록을 구성하는 객체의 타입을 지정.실제 반환타입은 List<>가 된다   -->
	        <collection property="farm" ofType="com.spam.sfplanner.corporation.Farm">
	            <id column="f_number" property="fNumber"/>
	            <result column="f_name" property="fName"/>
	            <result column="f_doroaddress" property="fDoroaddress"/>
	            <result column="f_jibunaddress" property="fJibunaddress"/>
	            <result column="f_phone" property="fPhone"/>
	            <result column="f_registdate" property="fRegistdate"/>
	            <result column="f_party" property="fParty"/>
	        </collection>
	  </resultMap>
	
	<!-- [김재희] -->
	<!-- 아이디 중복검사시 해당아이디가 존재하는지 여부 쿼리문 / 존재한다면 카운트 된다-->
	<select id="farmIdCheck"
		parameterType="String"
		resultType="Integer">
			SELECT 
				COUNT(*)
			FROM 
				sp_farm_member 
			WHERE 
				sp_farm_member.f_member_id=#{fMemberId}
	</select>
	
	<!-- 해당회원의 정보를 삭제처리하는 쿼리문 -->
	<delete id="deleteFarmMember"
		parameterType="String">
			DELETE 
			FROM sp_farm_member 
			WHERE sp_farm_member.f_member_id=#{fMemberId}
	</delete>
	  
	<!-- 해당회원의 정보를 수정처리 하는 쿼리문 -->
	<update id="updateFarmMember"
		parameterType="com.spam.sfplanner.user.FarmMemberRequest">
			UPDATE sp_farm_member
			SET f_member_pw=#{fMemberPw}
				, f_member_name=#{fMemberName}
				, f_member_phone=#{fMemberPhone}
				, f_member_email=#{fMemberEmail}
				, f_member_doroaddress=#{fMemberDoroaddress}
				, f_member_jibunaddress=#{fMemberJibunaddress}
				, f_member_detailaddress=#{fMemberDetailaddress}
			WHERE f_member_id=#{fMemberId}
	</update>
	  
 	<!-- 해당 회원의 상세정보(내정보) 보기, 수정화면 조회 쿼리문 -->
 	<select id="selectOneFarmMember"
 		parameterType="String"
 		resultMap="farmMember">
	 		SELECT sp_farm_member.f_member_id
	 			, sp_farm.f_number
				, sp_farm_member.f_member_pw
				, sp_farm_member.f_member_name
				, sp_farm_member.f_member_email
				, sp_farm_member.f_member_phone
				, sp_farm_member.f_member_gender
				, sp_farm_member.f_member_doroaddress
				, sp_farm_member.f_member_jibunaddress
				, sp_farm_member.f_member_detailaddress
				, sp_farm_member.f_member_registdate
				, sp_farm.f_Name
			FROM sp_farm_member
			JOIN sp_farm
			ON sp_farm_member.f_number = sp_farm.f_number
			WHERE sp_farm_member.f_member_id=#{fMemberId}
 	</select>
 	
 	<!-- 농가와 해당 농가의 회원리스트를 조인해 회원리스트 출력하는 쿼리문 -->
 	<select id="selectFarmMemberList"
 		parameterType="String"
 		resultMap="farmMember">
	 		SELECT sp_farm_member.f_number
	 			, sp_farm_member.f_member_id
				, sp_farm_member.f_member_name
				, sp_farm_member.f_member_phone
				, sp_farm_member.f_member_email
			FROM sp_farm_member
			JOIN sp_farm
			ON sp_farm_member.f_number = sp_farm.f_number
			WHERE sp_farm.f_Name=#{fName}
 	</select>
 	
 	<!-- 회원을 등록하는 쿼리문 -->
 	<insert id="insertFarmMember"
 		parameterType="com.spam.sfplanner.user.FarmMemberRequest">
 		INSERT INTO sp_farm_member(
 			f_member_id
 			, f_number
 			, f_member_pw
 			, f_member_name
 			, f_member_phone
 			, f_member_gender
 			, f_member_email
 			, f_member_privacy
 			, f_member_doroaddress
 			, f_member_jibunaddress
 			, f_member_detailaddress
 			, f_member_registdate)
		VALUES (
			#{fMemberId}
			, #{fNumber}
			, #{fMemberPw}
			, #{fMemberName}
			, #{fMemberPhone}
			, #{fMemberGender}
			, #{fMemberEmail}
			, #{fMemberPrivacy}
			, #{fMemberDoroaddress}
			, #{fMemberJibunaddress}
			, #{fMemberDetailaddress}
			, NOW())
 	</insert>
 </mapper>